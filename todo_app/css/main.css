/* Variables 
To create a variable with global scope, declare it inside the :root selector. The :root selector matches the document's root element.


*/
:root {
    --primary: #EA40A4;
    --business: #3a82ee;
    --personal: var(--primary);
    --light: #EEE;
    --grey: #888;
    --dark: #313154;
    --danger: #ff5b57;
    --box: #f7d8ff;

    --shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

    --business-glow: 0px 0px 4px rgba(58, 130, 238, 0.75);
    --personal-glow: 0px 0px 4px rgba(234, 64, 164, 0.75);
}

/* End of Variables */

/* Resets */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'montserrat', sans-serif;
}

input:not([type="radio"]):not([type="checkbox"]),
button {
    appearance: none;
    border: none;
    outline: none;
    background: none;
    cursor: initial;
}

/* End of Resets */

/* 
A good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables.
*/

body {
    background: var(--light);
    color: var(--dark);
}

section {
    margin-top: 2rem;
    margin-bottom: 2rem;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
}

h3 {
    color: var(--dark);
    font-size: 1.5rem;
    font-weight: 400;
    margin-bottom: 0.5rem;
}

h4 {
    color: var(--grey);
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.greeting .title {
    display: flex;
}

/* 

The flex property is used to make sure that the input element inside the .greeting .title container takes up the necessary space and aligns properly with other elements in the container.

The three values in the flex property represent the following:

flex-grow: specifies how much the item can grow relative to the other items in the container. In this case, it is set to 1, which means the item will be allowed to grow to fill any available space.
flex-shrink: specifies how much the item can shrink relative to the other items in the container. In this case, it is set to 1, which means the item will be allowed to shrink if there is not enough space available.
flex-basis: specifies the initial size of the item before any remaining space is distributed. In this case, it is set to 0%, which means the item will take up no space by default.

*/
.nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    color: #FFF;
    box-shadow: var(--shadow);
    border-radius: 0.5rem;
    margin-bottom: 1.5rem;
}

.greeting .title input {
    margin-left: 0.5rem;
    flex: 1 1 0%;
    min-width: 0;
}

.greeting .title,
.greeting .title input {
    color: var(--dark);
    font-size: 1.5rem;
    font-weight: 700;
}

.create-todo input[type="text"] {
    display: block;
    width: 100%;
    font-size: 1.125rem;
    padding: 1rem 1.5rem;
    color: var(--dark);
    background-color: #FFF;
    border-radius: 0.5rem;
    box-shadow: var(--shadow);
    margin-bottom: 1.5rem;
}

.create-todo .options {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 1rem;
    margin-bottom: 1.5rem;
}


/* 
The cursor: pointer; CSS property is used to change the appearance of the mouse cursor when it hovers over an element on a web page.

Overall, the cursor: pointer; property helps to improve the user experience by providing a clear indication of which elements on the page are interactive and clickable.
*/

.create-todo .options label {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #FFF;
    padding: 1.5rem;
    box-shadow: var(--shadow);
    border-radius: 0.5rem;
    cursor: pointer;
}

input[type="radio"],
input[type="checkbox"] {
    display: none;
}

.bubble {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    border-radius: 999px;
    border: 2px solid var(--business);
    box-shadow: var(--business-glow);
}

.bubble.personal {
    border-color: var(--personal);
    box-shadow: var(--personal-glow);
}

.bubble::after {
    content: '';
    display: block;
    opacity: 0;
    width: 0px;
    height: 0px;
    background-color: var(--business);
    box-shadow: var(--business-glow);
    border-radius: 999px;
    transition: 0.2s ease-in-out;
}

.bubble.personal::after {
    background-color: var(--personal);
    box-shadow: var(--personal-glow);
}

input:checked~.bubble::after {
    width: 10px;
    height: 10px;
    opacity: 1;
}

.create-todo .options label div {
    color: var(--dark);
    font-size: 1.125rem;
    margin-top: 1rem;
}

.create-todo input[type="submit"] {
    display: block;
    width: 100%;
    font-size: 1.125rem;
    padding: 1rem 1.5rem;
    color: #FFF;
    font-weight: 700;
    text-transform: uppercase;
    background-color: var(--primary);
    box-shadow: var(--personal-glow);
    border-radius: 0.5rem;
    cursor: pointer;
    transition: 0.2s ease-out;
}

.create-todo input[type="submit"]:hover {
    opacity: 0.75;
}

.todo-list .list {
    margin: 1rem 0;
}

.todo-list .todo-item {
    display: flex;
    align-items: center;
    background-color: #FFF;
    padding: 1rem;
    border-radius: 0.5rem;
    box-shadow: var(--shadow);
    margin-bottom: 1rem;
}

.todo-item label {
    display: block;
    margin-right: 1rem;
    cursor: pointer;
}

.todo-item .todo-content {
    flex: 1 1 0%;
}

.todo-item .todo-content input {
    color: var(--dark);
    font-size: 1.125rem;
}


/* 

Setting an element to display: flex; establishes a flex container, which means that its child elements become flexible items that can be repositioned and resized within the container, an essential tool for creating responsive and dynamic web designs.


*/

.todo-item .actions {
    display: flex;
    align-items: center;
}


/* 

the display: block; property is used to change the display behavior of an element to a block-level element, allowing it to take up the full width available to it and enabling additional styling options.

*/

.todo-item .actions button {
    display: block;
    padding: 0.5rem;
    border-radius: 0.25rem;
    color: #FFF;
    cursor: pointer;
    transition: 0.2s ease-in-out;
}

.todo-item .actions button:hover {
    opacity: 0.75;
}

.todo-item .actions .edit {
    margin-right: 0.5rem;
    background-color: var(--primary);
}

.todo-item .actions .delete {
    background-color: var(--danger);
}

.todo-item.done .todo-content input {
    text-decoration: line-through;
    color: var(--grey);
}

.app h2 {
    text-align: center;
}

.app p {
    flex-basis: 45%;
    background-color: var(--box);
    padding: 10px;
    border-radius: 30px;
    outline: var(--primary) solid 2px;
}

.about,
.privacy {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-top: 1.5rem;
    font-size: 1.2rem;
}